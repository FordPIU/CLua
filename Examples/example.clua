// Variable Declarations and Scoping
[export]
let globalVar = 42

[global]
let globalString = "Hello, global!"

let localVar = 10

if localVar > 5 then
    [export] // This is a invalid export, as exports cannot be nested
    let exportVar = localVar * 2

    [global] // This is valid, as globals may be nested
    let globlaVar2 = 582
end

// Function Declarations
funct greet(name)
    print "Hello, " .. name .. "!"
end

funct calculateSum(a, b)
    return a + b
end

// Control Flow
if globalVar > 40 then
    print "Global variable is greater than 40."
elseif globalVar < 40 then
    print "Global variable is less than 40."
else
    print "Global variable is equal to 40."
end

// Loops
for to 5
    print "Iteration: " .. i
end

for k to 5
    print "Iteration: " .. k
end

for pairs someTable
    print "Key: " .. i .. ", Value: " .. v
end

// Comment Types
/* Multi-line
   comment */

// Function Calls
greet "Alice"
print calculateSum(5, 7)

// Variable Usage
print globalVar
print globalString
print exportVar

// Arithmetic and Assignment
let result = calculateSum(globalVar, localVar)
result += 5
result *= 2
result++
result//
result** // multiplies it by 2

// Immutable Variables
let immutableVar = 100 (immutable)

// Boolean Logic
if localVar > 5 and globalVar < 50 then
    print "Both conditions are true."
end

// String Concatenation
let message = "Hello" .. ", " .. "world!"

// Table Initialization
let person = {
    name = "John",
    age = 30,
    occupation = "Engineer"
}

// Print Statements
print message
print numbers[3]
print person.name

// Exported Variables
[export]
let exportedValue = "This is an exported value."

// Pattern Matching
is result {
    5 -> print "Its 5!"
    10 -> print "Its 10!"
    -> print "Unknown"
}

// Hardset Type Annotations
funct subtract(a: number, b: number): number
    return a - b
end

// Project File Directives
#ifenv DEBUG
    print "In Debug Mode"
#endif

// Destructuring
let [x, y, z] = coords

// Delete
delete result

// Custom Operators
operator << (left, right)
    return left .. right
end

let message = "Hello, " << "world!"

// Generic values
funct subtract(<T>values: number): number
    let endNum = 0

    for pairs values
        endNum -= v
    end

    return endNum
end

// Template Functions
template addFunction(name, param)
    funct @name(a, b)
        return a + b + @param
    end
end

addFunction(addThree, 3)

// This is a area reserved for the testing of regex
let commentInString = "Hello //World"
let commentInString2 = "/* hello world! */"
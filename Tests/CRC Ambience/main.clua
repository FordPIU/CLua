var RN GetCurrentResourceName()
var SC {}
var SS {}

lfunct GetIdent(src)
    var identifiers GetPlayerIdentifiers(src)
    var retval = nil

    for _, identifier pairs identifiers
        if string.find(identifier, AmbientMusic.IdentifierType) then
            retval = string.gsub(identifier, AmbientMusic.IdentifierType, "")

            break
        end
    end

    return retval
end

lfunct DoesUserExist(uIdent, shouldCreateEntry)
    if uIdent == nil then
        print "ERR >> FAILED TO FETCH IDENTIFIER (1)"
        return
    end

    if SC[uIdent] == nil then
        if shouldCreateEntry then
            SC[uIdent] = AmbientMusic.DefaultSettings

            return true
        else
            return false
        end
    else
        return true
    end
end

lfunct SaveData()
    SaveResourceFile(RN, "Settings.json", json.encode(SC), -1)
end

lfunct UpdateData(src, key, value)
    local uIdent = GetIdent(src)
    if uIdent == nil then
        print "ERR >> FAILED TO FETCH IDENTIFIER (2)"
        return
    end

    if DoesUserExist(uIdent, true) then
        SC[uIdent][key] = value
    end
end

lfunct GetData(src)
    local uIdent = GetIdent(src)
    if uIdent == nil then
        print "ERR >> FAILED TO FETCH IDENTIFIER (3)"
        return
    end

    if DoesUserExist(uIdent, true) then
        return SC[uIdent]
    end
end

Citizen.CreateThread(function()
    SC = json.decode(LoadResourceFile(RN, "Settings.json")) or {}

    while true do
        Wait(2500)
        SaveData()
    end
end)

lfunct GetVolumeFromSettings(src)
    local UserSettings = GetData(src) or AmbientMusic.DefaultSettings
    local Volume = UserSettings.Vol
    local Paused = UserSettings.Paused

    if Paused then
        print"INFO >> " .. src .. " is paused."
        return 0.0
    else
        print"INFO >> " .. src .. " is @ " .. Volume
        return Volume
    end
end

lfunct PlayAmbience(src)
    local Vol = GetVolumeFromSettings(src)
    print "Playing sound " .. AmbientMusic.URL .. " at a volume of " .. Vol
    exports.xsound:PlayUrl(src, src .. "_AMBIENCE", AmbientMusic.URL, Vol, true)
end

RegisterNetEvent("CRC.AMBIENCE::OnLoad", function()
    local src = source

    PlayAmbience(src)
end)

RegisterCommand("musicvolume", function(src, args, _)
    if args[1] == nil then return end

    local NewVolume = tonumber(args[1])

    if NewVolume < AmbientMusic.MinMaxVolume[1] then
        NewVolume = AmbientMusic.MinMaxVolume[1]
    elseif NewVolume > AmbientMusic.MinMaxVolume[2] then
        NewVolume = AmbientMusic.MinMaxVolume[2]
    end

    UpdateData(src, "Vol", NewVolume)
    exports.xsound:setVolume(-1, src .. "_AMBIENCE", NewVolume)
end, false)

RegisterCommand("musictoggle", function(src, _, _)
    local Data = GetData(src)
    local Paused = Data.Paused or AmbientMusic.DefaultSettings.Paused
    local NewPaused = not Paused

    UpdateData(src, "Paused", NewPaused)

    if NewPaused then
        exports.xsound:Pause(-1, src .. "_AMBIENCE")
    else
        exports.xsound:Resume(-1, src .. "_AMBIENCE")
        exports.xsound:setVolume(-1, src .. "_AMBIENCE", Data.Vol or AmbientMusic.DefaultSettings.Vol)
    end
end, false)
